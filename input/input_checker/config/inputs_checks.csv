Test,Input_Table,Input_ID_Column,Severity,Type,Expression,Test_Vals,Report_Statistic,Test_Description
PERSON_CTRAMP_Fields_Availability,persons,perid,Fatal,Test,test_val in persons.columns,"hhid,perid,household_serial_no,pnum,age,sex,miltary,pemploy,pstudent,ptype,educ,grade,occen5,occsoc5,indcen,weeks,hours,rac1p,hisp,version",,Check if person file contains all the required fields for ABM
PERSON_military_valueCheck_agg,persons,perid,Warning,Test,"set(persons.miltary)=={0,1,2,3,4}",,,"Check if Person data matches the pre-defined military categories [0 = N/A Less than 17 years old, 1 = Yes, Now on Active Duty, 2 = Yes, on Active Duty in Past, but not Now, 3 = No, Training for Reserves/National Guard Only, 4 = No, Never Served in the Military]"
PERSON_military_valueCheck_disagg,persons,perid,Fatal,Test,"persons.miltary.apply(lambda x: True if x in [0,1,2,3,4] else False)",,,"Check if Person data matches the pre-defined military categories [0 = N/A Less than 17 years old, 1 = Yes, Now on Active Duty, 2 = Yes, on Active Duty in Past, but not Now, 3 = No, Training for Reserves/National Guard Only, 4 = No, Never Served in the Military]"
PERSON_pemploy_valueCheck_agg,persons,perid,Warning,Test,"set(persons.pemploy)=={1,2,3,4}",,,"Check if Person data matches the pre-defined pemploy categories [1 = Employed Full-Time, 2 = Employed Part-Time, 3 = Unemployed or Not in Labor Force, 4 = Less than 16 Years Old]"
PERSON_pemploy_valueCheck_disagg,persons,perid,Fatal,Test,"persons.pemploy.apply(lambda x: True if x in [1,2,3,4] else False)",,,"Check if Person data matches the pre-defined pemploy categories [1 = Employed Full-Time, 2 = Employed Part-Time, 3 = Unemployed or Not in Labor Force, 4 = Less than 16 Years Old]"
PERSON_pstudent_valueCheck_agg,persons,perid,Warning,Test,"set(persons.pstudent)=={1,2,3}",,,"Check if Person data matches the pre-defined pstudent categories [1 = Pre K-12, 2 = College Undergrad + Grad and Prof. School, 3 = Not Attending School]"
PERSON_pstudent_valueCheck_disagg,persons,perid,Fatal,Test,"persons.pstudent.apply(lambda x: True if x in [1,2,3] else False)",,,"Check if Person data matches the pre-defined pstudent categories [1 = Pre K-12, 2 = College Undergrad + Grad and Prof. School, 3 = Not Attending School]"
PERSON_ptype_valueCheck_agg,persons,perid,Warning,Test,"set(persons.ptype)=={1,2,3,4,5,6,7,8}",,,"Check if Person data matches the pre-defined ptype categories [1 = Full-time Worker, 2 = Part-time Worker, 3 = College Student, 4 = Non-working Adult, 5 = Non-working Senior, 6 = Driving Age Student, 7 = Non-driving Student, 8 = Pre-school]"
PERSON_ptype_valueCheck_disagg,persons,perid,Fatal,Test,"persons.ptype.apply(lambda x: True if x in [1,2,3,4,5,6,7,8] else False)",,,"Check if Person data matches the pre-defined ptype categories [1 = Full-time Worker, 2 = Part-time Worker, 3 = College Student, 4 = Non-working Adult, 5 = Non-working Senior, 6 = Driving Age Student, 7 = Non-driving Student, 8 = Pre-school]"
PERSON_educ_valueCheck_agg,persons,perid,Warning,Test,"set(persons.educ)=={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16}",,,"Check if Person data matches the pre-defined educ categories [0 = N/A (Under 3 years), 1 = No schooling completed, 2 = Nursery school to 4th grade, 3 = 5th grade or 6th grade, 4 = 7th grade or 8th grade, 5 = 9th grade, 6 = 10th grade, 7 = 11th grade, 8 = High school graduate, 9 = High school graduate, 10 = Some college but less than 1 year, 11 = One or more years of college no degree, 12 = Associate degree, 13 = Bachelor's degree, 14 = Master's degree, 15 = Professional degree, 16 = Doctorate degree]"
PERSON_educ_valueCheck_disagg,persons,perid,Fatal,Test,"persons.educ.apply(lambda x: True if x in [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16] else False)",,,"Check if Person data matches the pre-defined educ categories [0 = N/A (Under 3 years), 1 = No schooling completed, 2 = Nursery school to 4th grade, 3 = 5th grade or 6th grade, 4 = 7th grade or 8th grade, 5 = 9th grade, 6 = 10th grade, 7 = 11th grade, 8 = High school graduate, 9 = High school graduate, 10 = Some college but less than 1 year, 11 = One or more years of college no degree, 12 = Associate degree, 13 = Bachelor's degree, 14 = Master's degree, 15 = Professional degree, 16 = Doctorate degree]"
PERSON_grade_valueCheck_agg,persons,perid,Warning,Test,"set(persons.grade)=={0,1,2,3,4,5,6,7}",,,"Check if Person data mathces the pre-defined grade categories [0 = N/A (not attending school), 1 = Nursery school/preschool, 2 = Kindergarten, 3 = Grade 1 to grade 4, 4 = Grade 5 to grade 8, 5 = Grade 9 to grade 12, 6 = College undergraduate, 7 = Graduate or professional school]"
PERSON_grade_valueCheck_disagg,persons,perid,Fatal,Test,"persons.grade.apply(lambda x: True if x in [0,1,2,3,4,5,6,7] else False)",,,"Check if Person data mathces the pre-defined grade categories [0 = N/A (not attending school), 1 = Nursery school/preschool, 2 = Kindergarten, 3 = Grade 1 to grade 4, 4 = Grade 5 to grade 8, 5 = Grade 9 to grade 12, 6 = College undergraduate, 7 = Graduate or professional school]"
PERSON_occsoc5_valueCheck_agg,persons,perid,Warning,Test,set(persons.occsoc5)==set(occsoc.occsoc5),,,Check if Person data matches the pre-defined detailed occupation codes defined by the Standard Occupational Classification system
occsoc_codes,occsoc,occsoc5,NA,Calculation,set(occsoc.occsoc5.values),,,Get unique occupational codes from occsoc
PERSON_occsoc5_valueCheck_disagg,persons,perid,Fatal,Test,persons.occsoc5.apply(lambda x: True if x in occsoc_codes else False),,,Check if Person data matches the pre-defined detailed occupation codes defined by the Standard Occupational Classification system
PERSON_weeks_valueCheck_agg,persons,perid,Warning,Test,"set(persons.weeks)=={0,1,2,3,4,5,6}",,,"Check if Person data matches the pre-defined weeks categories [0 = N/A (less than 16 years old/did not work in past 12 months), 1 = 50 to 52 weeks, 2 = 48 to 49 weeks, 3 = 40 to 47 weeks, 4 = 27 to 39 weeks, 5 = 14 to 26 weeks, 6 = 13 weeks or less]"
PERSON_weeks_valueCheck_disagg,persons,perid,Fatal,Test,"persons.weeks.apply(lambda x: True if x in [0,1,2,3,4,5,6] else False)",,,"Check if Person data matches the pre-defined weeks categories [0 = N/A (less than 16 years old/did not work in past 12 months), 1 = 50 to 52 weeks, 2 = 48 to 49 weeks, 3 = 40 to 47 weeks, 4 = 27 to 39 weeks, 5 = 14 to 26 weeks, 6 = 13 weeks or less]"
PERSON_race1p_valueCheck_agg,persons,perid,Warning,Test,"set(persons.rac1p)=={1,2,3,4,5,6,7,8,9}",,,"Check if Person data matches the pre-defined race1p categories [1 = White Alone, 2 = Black or African American Alone, 3 = American Indian Alone, 4 = Alaska Native Alone, 5 = American Indian and Alaska Native Tribes specified; or American Indian or Alaska Native, not specified and no other races, 6 = Asian Alone, 7 = Native Hawaiian and Other Pacific Islander Alone, 8 = Some Other Race Alone, 9 = Two or More Major Race Groups]"
PERSON_race1p_valueCheck_disagg,persons,perid,Fatal,Test,"persons.rac1p.apply(lambda x: True if x in [1,2,3,4,5,6,7,8,9] else False)",,,"Check if Person data matches the pre-defined race1p categories [1 = White Alone, 2 = Black or African American Alone, 3 = American Indian Alone, 4 = Alaska Native Alone, 5 = American Indian and Alaska Native Tribes specified; or American Indian or Alaska Native, not specified and no other races, 6 = Asian Alone, 7 = Native Hawaiian and Other Pacific Islander Alone, 8 = Some Other Race Alone, 9 = Two or More Major Race Groups]"
PERSON_hisp_valueCheck_agg,persons,perid,Warning,Test,"set(persons.hisp)=={1,2}",,,"Check if Person data matches the pre-defined hisp categories [1 = Non-Hispanic, 2 = Hispanic]"
PERSON_hisp_valueCheck_disagg,persons,perid,Fatal,Test,"persons.hisp.apply(lambda x: True if x in [1,2] else False)",,,"Check if Person data matches the pre-defined hisp categories [1 = Non-Hispanic, 2 = Hispanic]"
PERSON_gender_valueCheck_agg,persons,perid,Fatal,Test,"set(persons.sex)=={1,2}",,,"Check if Person data matches the pre-defined gender categories [1=male, 2=female]"
PERSON_gender_valueCheck_disagg,persons,perid,Fatal,Test,"persons.sex.apply(lambda x: True if x in [1,2] else False)",,,"Check if Person data matches the pre-defined gender categories [1=male, 2=female]"
PERSON_age_valueCheck,persons,perid,Fatal,Test,(persons.age>=0),,,Check Person's age to be a positive number
PERSON_hhid_sequential_check,persons,perid,Fatal,Test,(min(persons.hhid)==1) & (max(persons.hhid)==len(set(households.hhid))),,,Ensure hhid in Person data is sequential
PERSON_perid_sequential_check,persons,perid,Fatal,Test,(min(persons.perid)==1) & (max(persons.perid)==len(set(persons.perid))),,,Ensure perid in Person's data is sequential
HH_hinccat1_valueCheck_agg,households,hhid,Warning,Test,"set(households.hinccat1)=={1,2,3,4,5}",,,"Check if Household data matches the pre-defined hinccat1 categories [1 = <$30k, 2 = $30-60k, 3 = $60-100k, 4 = $100-150k, 5 = $150+]"
HH_hinccat1_valueCheck_disagg,households,hhid,Fatal,Test,"households.hinccat1.apply(lambda x: True if x in [1,2,3,4,5] else False)",,,"Check if Household data matches the pre-defined hinccat1 categories [1 = <$30k, 2 = $30-60k, 3 = $60-100k, 4 = $100-150k, 5 = $150+]"
HH_hht_valueCheck_agg,households,hhid,Warning,Test,"set(households.hht)=={0,1,2,3,4,5,6,7}",,,"Check if Household data matches the pre-defined hht categories [0 = Not in universe (vacant or GQ), 1 = Family household: married-couple, 2 = Family household: male householder, no wife present, 3 = Family household, female householder, no husband present, 4 = Nonfamily household: male householder, living along, 5 = Nonfamily household: male householder, not living alone, 6 = Nonfamily household: female householder, living alone, 7 = Nonfamily household: female householder, not living alone]"
HH_hht_valueCheck_disagg,households,hhid,Fatal,Test,"households.hht.apply(lambda x: True if x in [0,1,2,3,4,5,6,7] else False)",,,"Check if Household data matches the pre-defined hht categories [0 = Not in universe (vacant or GQ), 1 = Family household: married-couple, 2 = Family household: male householder, no wife present, 3 = Family household, female householder, no husband present, 4 = Nonfamily household: male householder, living along, 5 = Nonfamily household: male householder, not living alone, 6 = Nonfamily household: female householder, living alone, 7 = Nonfamily household: female householder, not living alone]"
HH_bldgsz_valueCheck_agg,households,hhid,Warning,Test,"set(households.bldgsz)=={1,2,3,4,5,6,7,8,9,10}",,,"Check if Household data matches the pre-defined bldgsz categories [1 = Mobile home or trailer, 2 = One-family house detached, 3 = One-family house attached, 4 = 2 Apartments, 5 = 3-4 Apartments, 6 = 5-9 Apartments, 7 = 10-19 Apartments, 8 = 20-49 Apartments, 9 = 50 or more apartments, 10 = Boat, RV, van, etc.]"
HH_bldgsz_valueCheck_disagg,households,hhid,Warning,Test,"households.bldgsz.apply(lambda x: True if x in [1,2,3,4,5,6,7,8,9,10] else False)",,,"Check if Household data matches the pre-defined bldgsz categories [1 = Mobile home or trailer, 2 = One-family house detached, 3 = One-family house attached, 4 = 2 Apartments, 5 = 3-4 Apartments, 6 = 5-9 Apartments, 7 = 10-19 Apartments, 8 = 20-49 Apartments, 9 = 50 or more apartments, 10 = Boat, RV, van, etc.]"
HH_persons_valueCheck,households,hhid,Fatal,Test,(households.persons>0),,,Check if number of persons in household is a positive number
HH_hworkers_persons_valueCheck,households,hhid,Fatal,Test,(households.hworkers >= 0) & (households.hworkers <= households.persons),,,Check if number of workers in household are within the valid range
HH_hhid_sequential_check,households,hhid,Fatal,Test,(min(households.hhid)==1) & (max(households.hhid)==len(set(households.hhid))),,,Ensure hhid in Household data is sequential
mgra_id_list,mgra_data,mgra,NA,Calculation,set(mgra_data.mgra.values),,,Get unique mgra IDs from mgra_data
HH_mgra_range_check,households,hhid,Fatal,Test,households.mgra.apply(lambda x: True if x in mgra_id_list else False),,,Check if mgra IDs in the Household data are in the allowable range
taz_id_list,mgra_data,mgra,NA,Calculation,set(mgra_data.taz.values),,,Get unique taz IDs from mgra_data
HH_TAZ_range_check,households,hhid,Fatal,Test,households.taz.apply(lambda x: True if x in taz_id_list else False),,,Check if taz IDs in the Household data are in the allowable range
#zero_hh_mgras,mgra_data,mgra,NA,Calculation,set(mgra_data.mgra[mgra_data.hh==0]),,,Get mgras with zero households from mgra_data
#HH_household_in_zeroHH_mgra,households,hhid,Fatal,Test,households.mgra.apply(lambda x: True if x not in zero_hh_mgras else False),,,Check if any household is assigned to an mgra with zero households
NODE_CTRAMP_Fields_Availability,network_nodes,id,Fatal,Test,test_val in network_nodes.columns,"id,@tap_id",,Check if Node data contains all the required fields for ABM. The CSV exporter should throw an error if any field is missing in the Emme object
LINK_POSITIVE_LENGTH,network_links,id,Logical,Test,network_links.length>0,,,All link length should be greater than zero
#TRANSITSEGMENT_Unique_Stop_ID_Check,transit_segments,id,Fatal,Test,len(set(transit_segments['@stop_id'])) == len(transit_segments['@stop_id']),,,All transit segment stop IDs must be unique
mgra_total_employment,mgra_data,mgra,NA,Calculation,mgra_data[[col for col in mgra_data if (col.startswith('emp')) and not (col.endswith('total'))]].sum(axis=1),,,
MGRA_TotalEmployment_CalcCheck,mgra_data,mgra,Logical,Test,mgra_data.emp_total==mgra_total_employment,,,Check if employment by industry adds up to total employment
